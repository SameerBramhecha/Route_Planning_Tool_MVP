<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Route Planning Tool MVP</title>
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    
    
    
        <div id="input-container">
            <input type="text" id="addressInput" placeholder="Enter address">
            <button class="btn" onclick="addLocation()" id="addLocationBtn">Add Location</button>
            <button class="btn" onclick="planRoute()" id="planRouteBtn">Plan Route</button>
        </div>
        <div id="addresses">
            <ul id="addressesList"></ul>
        </div>
        <div id="pathDistance">
        </div>
    
        
    <div id="map-container">
        <div id="map"></div>
    </div>

    <script>

    window.addEventListener('beforeunload', function (event) {
        // Make a request to clear the locations database when the page refreshes
        const xhr = new XMLHttpRequest();
        xhr.open('DELETE', '/clear-locations');
        xhr.onload = function () {
            if (xhr.status === 200) {
                console.log('Locations database cleared successfully.');
            } else {
                console.error('Failed to clear locations database.');
            }
        };
        xhr.send();
    });

        let map;
            let currentLocationMarker;
            let autocomplete;
            let markers = [];
             let directionsService;
                let directionsRenderer;

            function initMap() {
                // Try HTML5 geolocation
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        const currentLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        map = new google.maps.Map(document.getElementById('map'), {
                            center: currentLocation,
                            zoom: 12
                        });
                        currentLocationMarker = new google.maps.Marker({
                            position: currentLocation,
                            map: map,
                            title: 'Your Location'
                        });

                        // Add Autocomplete functionality to the input field
                        autocomplete = new google.maps.places.Autocomplete(document.getElementById('addressInput'));
                        autocomplete.bindTo('bounds', map);
                        // Initialize Directions Service and Renderer
                        directionsService = new google.maps.DirectionsService();
                        directionsRenderer = new google.maps.DirectionsRenderer();
                        directionsRenderer.setMap(map);
                    }, function () {
                        handleLocationError(true, map.getCenter());
                    });
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, map.getCenter());
                }
                 
                
            }

            function handleLocationError(browserHasGeolocation, currentLocation) {
                console.error('Error: The Geolocation service failed.');
                map = new google.maps.Map(document.getElementById('map'), {
                    center: currentLocation,
                    zoom: 12
                });
            }

            function addLocation() {
                const address = document.getElementById('addressInput').value;
                if (!address) {
                    alert('Please enter an address.');
                    return;
                }

                // Use Geocoding to get the latitude and longitude of the entered address
                const geocoder = new google.maps.Geocoder();
                geocoder.geocode({ address: address }, function (results, status) {
                    if (status === 'OK') {
                        const location = results[0].geometry.location;
                        const lat = location.lat();
                        const lng = location.lng();

                        // Send the address, latitude, and longitude to the server to store in the database
                        fetch('/add-location', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ address: address, latitude: lat, longitude: lng })
                        })
                            .then(response => response.json())
                            .then(data => {
                                // Add marker to the map
                                const marker = new google.maps.Marker({
                                    position: location,
                                    map: map,
                                    title: address,
                                    jobId: data.jobId
                                });
                                markers.push(marker);
                                // Display the entered address and job ID in the list
                                const addressesList = document.getElementById('addresses');
                                const listItem = document.createElement('li');
                                listItem.id = `job-${data.jobId}`;
                                const addressText = document.createTextNode(`${address} (Job ID: ${data.jobId})`);
                                listItem.appendChild(addressText);

                                // Create and add a button to mark the job as completed
                                const markCompletedButton = document.createElement('button');
                                markCompletedButton.textContent = 'Mark as Completed';
                                markCompletedButton.addEventListener('click', function () {
                                    markAsCompleted(data.jobId);
                                });
                                listItem.appendChild(markCompletedButton);

                                addressesList.appendChild(listItem);
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Failed to add location. Please try again.');
                            });
                            
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }
           function markAsCompleted(jobId) {
                fetch(`/complete-job/${jobId}`, { method: 'PUT' })
                    .then(response => {
                        if (response.ok) {
                            console.log(`Job ${jobId} marked as completed.`);
                            // Remove the completed job from the list
                            const listItem = document.getElementById(`job-${jobId}`);
                            if (listItem) {
                                listItem.parentNode.removeChild(listItem);
                            } else {
                                console.error('List item not found.');
                            }
                            // Remove the corresponding marker from the map
                            const markerIndex = markers.findIndex(marker => marker.jobId === jobId);
                            if (markerIndex !== -1) {
                                const marker = markers.splice(markerIndex, 1)[0];
                                marker.setMap(null); // Remove the marker from the map
                            } else {
                                console.error('Marker not found.');
                            }
                        } else {
                            console.error('Failed to mark job as completed.');
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

        function planRoute() {
                if (markers.length < 1) {
                    console.log('At least one address is required to plan a route.');
                    return;
                }

                // Get the current location
                const currentLocation = currentLocationMarker.getPosition();

                // Get the coordinates of all the addresses
                const addresses = markers.map(marker => marker.getPosition());

                // Create an array to hold all the permutations of addresses
                const permutations = [];

                // Function to generate permutations using Heap's algorithm
                const generatePermutations = (array, n) => {
                    if (n === 1) {
                        permutations.push(array.slice());
                        return;
                    }

                    for (let i = 0; i < n; i++) {
                        generatePermutations(array, n - 1);

                        // Swap the elements if n is even, otherwise swap the first and last element
                        if (n % 2 === 0) {
                            [array[i], array[n - 1]] = [array[n - 1], array[i]];
                        } else {
                            [array[0], array[n - 1]] = [array[n - 1], array[0]];
                        }
                    }
                };

                // Generate permutations of addresses
                generatePermutations(addresses, addresses.length);

                // Initialize variables for the shortest route and its length
                let shortestRoute = null;
                let shortestLength = Infinity;

                // Iterate through each permutation to find the shortest route
                for (const perm of permutations) {
                    let totalDistance = 0;
                    let currentLocationIndex = 0;

                    // Calculate the total distance for the current permutation
                    for (let i = 0; i < perm.length; i++) {
                        const distance = google.maps.geometry.spherical.computeDistanceBetween(
                            currentLocationIndex === 0 ? currentLocation : perm[currentLocationIndex - 1],
                            perm[currentLocationIndex]
                        );
                        totalDistance += distance;
                        currentLocationIndex++;
                    }

                    // Calculate the distance from the last address back to the current location
                    const distanceToStart = google.maps.geometry.spherical.computeDistanceBetween(
                        perm[perm.length - 1],
                        currentLocation
                    );
                    totalDistance += distanceToStart;

                    // Update the shortest route and its length if applicable
                    if (totalDistance < shortestLength) {
                        shortestRoute = perm.slice();
                        shortestLength = totalDistance;
                    }
                }

             // Convert the shortest length from meters to kilometers
            const shortestLengthKm = shortestLength / 1000;

            // Display the path length of the shortest route in kilometers on the page
            const pathDistanceElement = document.getElementById('pathDistance');
            pathDistanceElement.textContent = `Shortest path distance: ${shortestLengthKm.toFixed(2)} kilometers`;


                // Display the shortest route on the map
                const directionsService = new google.maps.DirectionsService();
                const directionsRenderer = new google.maps.DirectionsRenderer();

                const origin = currentLocation;
                const destination = shortestRoute[shortestRoute.length - 1];

                const waypoints = shortestRoute.slice(0, shortestRoute.length - 1).map(address => ({
                    location: address,
                    stopover: true
                }));

                directionsService.route(
                    {
                        origin: origin,
                        destination: destination,
                        waypoints: waypoints,
                        optimizeWaypoints: true,
                        travelMode: 'DRIVING'
                    },
                    (response, status) => {
                        if (status === 'OK') {
                            directionsRenderer.setMap(map);
                            directionsRenderer.setDirections(response);
                        } else {
                            console.error('Error:', status);
                        }
                    }
                );
            }



            // Helper function to shuffle an array in place
            function shuffle(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }


            
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>&libraries=places&callback=initMap" async
        defer></script>
</body>

</html>